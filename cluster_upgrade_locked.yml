# playbook to upgrade cluster to locked specific version in all.yml file

- hosts: master
  tasks:
    - name: apt-get update
      apt:
        update_cache: yes
        autoclean: yes
        autoremove: yes

    - name: Upgrade kubeadm to v{{ version_kubernetes }} --ignore-preflight-errors=all
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - kubeadm={{ version_kubernetes }}-00

    - name: main | restarting machine
      shell: sleep 2 && shutdown -r now "rebooting to complete hostname change"
      async: 1
      poll: 0
      ignore_errors: true
      become: true

    - name: main | waiting for server to come back
      wait_for:
        host: "{{ ansible_host | default(inventory_hostname) }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
      vars:
        ansible_connection: local
      become: false

    - name: Upgrade cluster with kubeadm to v{{ version_kube_cluster }}
      shell: "kubeadm upgrade apply -y v{{ version_kube_cluster }}"
      async: 300
      poll: 100
      register: upgrade_output

    - name: Print upgrade output
      debug:
        var: upgrade_output
        verbosity: 0

    - name: Cordon Hosts
      shell: "kubectl cordon {{ item }}"
      with_items:
        - "{{ groups['all'] }}"
      tags: cordon

    - name: Drain Hosts
      shell: "kubectl drain {{ item }} --ignore-daemonsets"
      with_items:
        - "{{ groups['all'] }}"
      ignore_errors: yes
      tags: drain

- hosts: all
  tasks:
    - name: Upgrade Y'all to v{{ version_kubernetes }}
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - kubelet={{ version_kubernetes }}-00
        - kubectl={{ version_kubernetes }}-00
      tags:
        - kubelet
        - kubectl

- hosts: master
  tasks:
    - name: Uncordon Hosts
      shell: "kubectl uncordon {{ item }}"
      with_items:
        - "{{ groups['all'] }}"
      tags: uncordon